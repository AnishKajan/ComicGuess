name: CI/CD Pipeline - Main

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js for frontend security scan
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Setup Python for backend security scan
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit semgrep

      - name: Run Safety check
        run: |
          cd backend
          safety check --json --output safety-report.json || true

      - name: Run Bandit security linter
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Semgrep security analysis
        run: |
          cd backend
          semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            backend/safety-report.json
            backend/bandit-report.json
            backend/semgrep-report.json
            trivy-results.sarif

  # Code quality and linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend code quality
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint -- --format=json --output-file=eslint-report.json || true

      - name: Run Prettier check
        run: |
          cd frontend
          npx prettier --check . || true

      - name: TypeScript type checking
        run: |
          cd frontend
          npx tsc --noEmit

      # Backend code quality
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy pylint

      - name: Run Flake8
        run: |
          cd backend
          flake8 . --format=json --output-file=flake8-report.json || true

      - name: Run Black formatter check
        run: |
          cd backend
          black --check --diff .

      - name: Run isort import sorting check
        run: |
          cd backend
          isort --check-only --diff .

      - name: Run MyPy type checking
        run: |
          cd backend
          mypy . --ignore-missing-imports --json-report mypy-report || true

      - name: Run Pylint
        run: |
          cd backend
          pylint **/*.py --output-format=json > pylint-report.json || true

      - name: Upload code quality artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-results
          path: |
            frontend/eslint-report.json
            backend/flake8-report.json
            backend/mypy-report/
            backend/pylint-report.json

  # Frontend tests with coverage
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentage from coverage report
          COVERAGE=$(npm run test:coverage:json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*' | awk -F'[:,]' '{print ($4/$2)*100}')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 80% threshold"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

      - name: Run E2E tests
        run: |
          npm run build
          npm run test:e2e:ci
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/playwright-report/

  # Backend tests with coverage
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      cosmos-emulator:
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10251:10251
          - 10252:10252
          - 10253:10253
          - 10254:10254
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 10
          AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Wait for Cosmos DB Emulator
        run: |
          timeout 300 bash -c 'until curl -k https://localhost:8081/_explorer/emulator.pem; do sleep 5; done'

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 -n auto
        env:
          APP_ENV: test
          COSMOS_ENDPOINT: https://localhost:8081
          COSMOS_KEY: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
          COSMOS_DATABASE_NAME: test_comicguess
          AZURE_STORAGE_ACCOUNT_NAME: devstoreaccount1
          AZURE_STORAGE_ACCOUNT_KEY: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
          JWT_SECRET_KEY: test-secret-key-for-ci
          SESSION_SECRET: test-session-secret-for-ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend
          flags: backend
          name: backend-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/htmlcov/
            backend/coverage.xml

  # Build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, frontend-tests, backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.example.com
          NEXT_PUBLIC_APP_ENV: staging

      # Backend build
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate backend startup
        run: |
          cd backend
          timeout 30 python -c "
          import uvicorn
          from main import app
          import asyncio
          import signal
          
          def handler(signum, frame):
              exit(0)
          
          signal.signal(signal.SIGALRM, handler)
          signal.alarm(10)
          
          try:
              uvicorn.run(app, host='0.0.0.0', port=8000, log_level='info')
          except SystemExit:
              print('✅ Backend startup validation successful')
          " &
          sleep 5
          curl -f http://localhost:8000/health || exit 1
          pkill -f uvicorn

      # Docker build validation
      - name: Build Docker image
        run: |
          cd backend
          docker build -t comicguess-backend:test .

      - name: Test Docker container
        run: |
          docker run -d --name test-container -p 8001:8000 comicguess-backend:test
          sleep 10
          curl -f http://localhost:8001/health || exit 1
          docker stop test-container
          docker rm test-container

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, frontend-tests, backend-tests, build-validation]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Evaluate quality gates
        run: |
          echo "🔍 Evaluating quality gates..."
          
          # Check if all required jobs passed
          REQUIRED_JOBS=("security-scan" "code-quality" "frontend-tests" "backend-tests" "build-validation")
          FAILED_JOBS=()
          
          for job in "${REQUIRED_JOBS[@]}"; do
            if [[ "${{ needs.security-scan.result }}" == "failure" && "$job" == "security-scan" ]] || \
               [[ "${{ needs.code-quality.result }}" == "failure" && "$job" == "code-quality" ]] || \
               [[ "${{ needs.frontend-tests.result }}" == "failure" && "$job" == "frontend-tests" ]] || \
               [[ "${{ needs.backend-tests.result }}" == "failure" && "$job" == "backend-tests" ]] || \
               [[ "${{ needs.build-validation.result }}" == "failure" && "$job" == "build-validation" ]]; then
              FAILED_JOBS+=("$job")
            fi
          done
          
          if [ ${#FAILED_JOBS[@]} -eq 0 ]; then
            echo "✅ All quality gates passed!"
            echo "QUALITY_GATES_PASSED=true" >> $GITHUB_ENV
          else
            echo "❌ Quality gates failed for: ${FAILED_JOBS[*]}"
            echo "QUALITY_GATES_PASSED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Comment PR with quality gates results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const passed = process.env.QUALITY_GATES_PASSED === 'true';
            const status = passed ? '✅ PASSED' : '❌ FAILED';
            const emoji = passed ? '🎉' : '🚨';
            
            const body = `${emoji} **Quality Gates ${status}**
            
            | Check | Status |
            |-------|--------|
            | Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |
            | Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |
            | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅' || '❌' }} |
            | Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅' || '❌' }} |
            | Build Validation | ${{ needs.build-validation.result == 'success' && '✅' || '❌' }} |
            
            ${passed ? 'All checks passed! 🚀 Ready for deployment.' : 'Some checks failed. Please review and fix issues before merging.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "🚀 Checking deployment readiness..."
          
          # Check if this is a deployable branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "✅ Production deployment ready"
            echo "DEPLOY_ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "✅ Staging deployment ready"
            echo "DEPLOY_ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ℹ️ Not a deployable branch"
            exit 0
          fi

      - name: Trigger deployment workflows
        run: |
          echo "🔄 Triggering deployment workflows for ${{ env.DEPLOY_ENVIRONMENT }}"
          # The actual deployment will be handled by the existing frontend and backend workflows
          echo "Deployment workflows will be triggered automatically by the existing workflows"