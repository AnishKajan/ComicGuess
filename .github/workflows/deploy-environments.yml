name: Multi-Environment Deployment

'on':
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (dev, staging, production)'
      frontend_url:
        required: false
        type: string
        description: 'Frontend URL for the environment'
      backend_url:
        required: false
        type: string
        description: 'Backend URL for the environment'
    secrets:
      AZURE_CREDENTIALS:
        required: true
      VERCEL_TOKEN:
        required: true
      COSMOS_ENDPOINT:
        required: true
      COSMOS_KEY:
        required: true
      STORAGE_ACCOUNT_NAME:
        required: true
      STORAGE_ACCOUNT_KEY:
        required: true
      JWT_SECRET_KEY:
        required: true
      SESSION_SECRET:
        required: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate-environment:
    name: Validate Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      deployment-strategy: ${{ steps.strategy.outputs.strategy }}
      health-check-url: ${{ steps.strategy.outputs.health-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment strategy
        id: strategy
        run: |
          case "${{ inputs.environment }}" in
            "dev")
              echo "strategy=direct" >> $GITHUB_OUTPUT
              echo "health-url=https://comicguess-backend-dev.azurewebsites.net/health" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "strategy=blue-green" >> $GITHUB_OUTPUT
              echo "health-url=https://comicguess-backend-staging.azurewebsites.net/health" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "strategy=canary" >> $GITHUB_OUTPUT
              echo "health-url=https://comicguess-backend-prod.azurewebsites.net/health" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac

      - name: Validate environment secrets
        run: |
          echo "üîç Validating environment secrets for ${{ inputs.environment }}..."
          
          # Check required secrets are not empty
          if [ -z "${{ secrets.COSMOS_ENDPOINT }}" ]; then
            echo "‚ùå COSMOS_ENDPOINT secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.COSMOS_KEY }}" ]; then
            echo "‚ùå COSMOS_KEY secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.JWT_SECRET_KEY }}" ]; then
            echo "‚ùå JWT_SECRET_KEY secret is missing"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present"

  deploy-backend:
    name: Deploy Backend (${{ inputs.environment }})
    runs-on: ubuntu-latest
    needs: validate-environment
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pre-deployment tests
        run: |
          pytest tests/ -v --tb=short -k "not integration"
        env:
          APP_ENV: ${{ inputs.environment }}
          COSMOS_ENDPOINT: ${{ secrets.COSMOS_ENDPOINT }}
          COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy with strategy - Direct (Dev)
        if: needs.validate-environment.outputs.deployment-strategy == 'direct'
        uses: azure/webapps-deploy@v2
        with:
          app-name: comicguess-backend-dev
          package: .
          startup-command: 'uvicorn main:app --host 0.0.0.0 --port 8000'

      - name: Deploy with strategy - Blue-Green (Staging)
        if: needs.validate-environment.outputs.deployment-strategy == 'blue-green'
        run: |
          echo "üîÑ Implementing Blue-Green deployment for staging..."
          
          # Deploy to staging slot first
          az webapp deployment slot create \
            --name comicguess-backend-staging \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot green \
            --configuration-source comicguess-backend-staging || true
          
          # Deploy to green slot
          az webapp deploy \
            --name comicguess-backend-staging \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot green \
            --src-path . \
            --type zip
          
          # Configure app settings for green slot
          az webapp config appsettings set \
            --name comicguess-backend-staging \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot green \
            --settings \
              APP_ENV=staging \
              COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}" \
              COSMOS_KEY="${{ secrets.COSMOS_KEY }}" \
              AZURE_STORAGE_ACCOUNT_NAME="${{ secrets.STORAGE_ACCOUNT_NAME }}" \
              AZURE_STORAGE_ACCOUNT_KEY="${{ secrets.STORAGE_ACCOUNT_KEY }}" \
              JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              SESSION_SECRET="${{ secrets.SESSION_SECRET }}"

      - name: Deploy with strategy - Canary (Production)
        if: needs.validate-environment.outputs.deployment-strategy == 'canary'
        run: |
          echo "üîÑ Implementing Canary deployment for production..."
          
          # Create canary slot if it doesn't exist
          az webapp deployment slot create \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot canary \
            --configuration-source comicguess-backend-prod || true
          
          # Deploy to canary slot (10% traffic)
          az webapp deploy \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot canary \
            --src-path . \
            --type zip
          
          # Configure app settings for canary slot
          az webapp config appsettings set \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot canary \
            --settings \
              APP_ENV=production \
              COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}" \
              COSMOS_KEY="${{ secrets.COSMOS_KEY }}" \
              AZURE_STORAGE_ACCOUNT_NAME="${{ secrets.STORAGE_ACCOUNT_NAME }}" \
              AZURE_STORAGE_ACCOUNT_KEY="${{ secrets.STORAGE_ACCOUNT_KEY }}" \
              JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              SESSION_SECRET="${{ secrets.SESSION_SECRET }}"
          
          # Set traffic routing (10% to canary)
          az webapp traffic-routing set \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --distribution canary=10

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 60

      - name: Health check
        run: |
          echo "üè• Running health check..."
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f "${{ needs.validate-environment.outputs.health-check-url }}" --max-time 30; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚ùå Health check failed, retrying in 30 seconds..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            exit 1
          fi

  deploy-frontend:
    name: Deploy Frontend (${{ inputs.environment }})
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy-backend]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run pre-deployment tests
        run: |
          npm run lint
          npm run test:run
          npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ inputs.backend_url }}
          NEXT_PUBLIC_APP_ENV: ${{ inputs.environment }}

      - name: Deploy to Vercel
        run: |
          npm install --global vercel@latest
          
          case "${{ inputs.environment }}" in
            "dev")
              vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
              vercel build --token=${{ secrets.VERCEL_TOKEN }}
              vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
              ;;
            "staging")
              vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
              vercel build --token=${{ secrets.VERCEL_TOKEN }}
              vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
              ;;
            "production")
              vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
              vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
              vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
              ;;
          esac

  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy-backend, deploy-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install validation dependencies
        run: |
          pip install requests pytest

      - name: Run deployment validation
        run: |
          python scripts/validate-deployment.py \
            --environment ${{ inputs.environment }} \
            --url ${{ inputs.backend_url }}

      - name: Run integration tests
        if: inputs.environment != 'production'
        run: |
          # Run integration tests against the deployed environment
          pytest tests/ -v -k "integration" --tb=short
        env:
          TEST_BACKEND_URL: ${{ inputs.backend_url }}
          TEST_FRONTEND_URL: ${{ inputs.frontend_url }}

  promote-deployment:
    name: Promote Deployment
    runs-on: ubuntu-latest
    needs: [validate-environment, post-deployment-validation]
    if: needs.validate-environment.outputs.deployment-strategy != 'direct'
    environment: ${{ inputs.environment }}-promotion
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Promote Blue-Green deployment
        if: needs.validate-environment.outputs.deployment-strategy == 'blue-green'
        run: |
          echo "üîÑ Promoting Blue-Green deployment..."
          
          # Swap slots (green becomes production)
          az webapp deployment slot swap \
            --name comicguess-backend-staging \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot green \
            --target-slot production
          
          echo "‚úÖ Blue-Green deployment promoted"

      - name: Promote Canary deployment
        if: needs.validate-environment.outputs.deployment-strategy == 'canary'
        run: |
          echo "üîÑ Promoting Canary deployment..."
          
          # Gradually increase traffic to canary
          echo "Increasing canary traffic to 50%..."
          az webapp traffic-routing set \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --distribution canary=50
          
          # Wait and monitor
          sleep 300  # 5 minutes
          
          # Final promotion - swap slots
          echo "Final promotion - swapping slots..."
          az webapp deployment slot swap \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --slot canary \
            --target-slot production
          
          # Reset traffic routing
          az webapp traffic-routing clear \
            --name comicguess-backend-prod \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }}
          
          echo "‚úÖ Canary deployment promoted"

  rollback-deployment:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && needs.validate-environment.outputs.deployment-strategy != 'direct'
    needs: [validate-environment, deploy-backend, deploy-frontend, post-deployment-validation]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment for ${{ inputs.environment }}..."
          
          case "${{ needs.validate-environment.outputs.deployment-strategy }}" in
            "blue-green")
              # Keep current production slot, delete green slot
              az webapp deployment slot delete \
                --name comicguess-backend-staging \
                --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
                --slot green
              ;;
            "canary")
              # Reset traffic routing and delete canary slot
              az webapp traffic-routing clear \
                --name comicguess-backend-prod \
                --resource-group ${{ vars.AZURE_RESOURCE_GROUP }}
              
              az webapp deployment slot delete \
                --name comicguess-backend-prod \
                --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
                --slot canary
              ;;
          esac
          
          echo "‚úÖ Rollback completed"